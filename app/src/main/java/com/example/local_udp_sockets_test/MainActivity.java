
package com.example.local_udp_sockets_test;

import androidx.appcompat.app.AppCompatActivity;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import com.example.local_udp_sockets_test.audio_pipeline_recording.AACADTSFramePacketizer;
import com.example.local_udp_sockets_test.audio_pipeline_recording.AACADTSFrameProcessor;
import com.example.local_udp_sockets_test.helpers.InterModuleInfo;

import net.named_data.jndn.Data;
import net.named_data.jndn.Name;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "MainActivity";
    Button button_;
    int currentBundleNum_ = 0;

    BroadcastReceiver AACADTSFrameProcessorListener = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Data audioPacket = AACADTSFramePacketizer.generateAudioDataPacket(new Name("/dummy/name"),
                    intent.getByteArrayExtra(InterModuleInfo.AAC_ADTS_Frame_Processor_EXTRA_AUDIO_BUNDLE_ARRAY));

            Log.d(TAG, "Name of audio data packet: " + audioPacket.getName());
            Log.d(TAG, "Contents of audio data packet: " + Helpers.bytesToHex(audioPacket.getContent().getImmutableArray()));

            try {
                File audioFile = new File(getExternalCacheDir().getAbsolutePath() + "/" + currentBundleNum_ + ".aac");
                FileOutputStream os = new FileOutputStream(audioFile);
                os.write(audioPacket.getContent().getImmutableArray());
                os.close();
                currentBundleNum_++;
            }
            catch (IOException e) { e.printStackTrace(); }


        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        button_ = (Button) findViewById(R.id.button);
        button_.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final MediaPlayer player = new MediaPlayer();
                player.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                        try {
                            player.release();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
                try {
                    File audioBundleFile = new File(getExternalCacheDir().getAbsolutePath() + "/1.aac");
                    player.setDataSource(audioBundleFile.getAbsolutePath());
                    player.prepare();
                    player.start();
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        LocalBroadcastManager.getInstance(this).registerReceiver(AACADTSFrameProcessorListener,
                                                                    AACADTSFrameProcessor.getIntentFilter());

        ParcelFileDescriptor[] mParcelFileDescriptors = null;
        ParcelFileDescriptor mParcelRead;
        ParcelFileDescriptor mParcelWrite;

        AACADTSFrameProcessor mPacketizer = new AACADTSFrameProcessor(this, getExternalCacheDir());

        // create an array of parcel file descriptors
        try {
            mParcelFileDescriptors = ParcelFileDescriptor.createPipe();
        } catch (IOException e) {
            e.printStackTrace();
        }
        mParcelRead = new ParcelFileDescriptor(mParcelFileDescriptors[0]);
        mParcelWrite = new ParcelFileDescriptor(mParcelFileDescriptors[1]);

        // create the recorder object to record audio and stream it to the local socket
        MediaRecorder recorder = new MediaRecorder();
        recorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
        recorder.setOutputFormat(MediaRecorder.OutputFormat.AAC_ADTS);
        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        recorder.setAudioChannels(1);
        recorder.setAudioSamplingRate(8000);
        recorder.setAudioEncodingBitRate(10000);
        recorder.setOutputFile(mParcelWrite.getFileDescriptor());

        Log.d(TAG, "Recording started...");
        try {
            recorder.prepare();
            recorder.start();
        } catch (IOException e) {
            e.printStackTrace();
        }

        InputStream is = new ParcelFileDescriptor.AutoCloseInputStream(mParcelRead);

        // set the packetizer to read the MediaRecorder's stream and packetize its ADTS frames
        mPacketizer.setInputStream(is);
        mPacketizer.start();

        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        recorder.stop();
        mPacketizer.stop();
        Log.d(TAG, "Recording stopped.");

        // code for writing a hex string into a file
//        String test_aac_file_hex_string
//        byte[] test_aac_file_byte_array = Helpers.hexStringToByteArray(test_aac_file_hex_string);
//        File test_aac_file = new File(getExternalCacheDir().getAbsolutePath() + "/test.aac");
//
//        OutputStream os = null;
//        try {
//            os = new FileOutputStream(test_aac_file);
//            os.write(test_aac_file_byte_array);
//            os.close();
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

    // code for reading out files as hex strings
//        int currentFileNum = 0;
//        for (int i = 0; i < 37; i++) {
//            byte[] buf = new byte[20000];
//            byte[] real_contents = null;
//
//            FileInputStream is = null;
//            int read_size = 0;
//            try {
//                is = new FileInputStream(getExternalCacheDir().getAbsolutePath() + "/" + currentFileNum + ".aac");
//                read_size = is.available();
//                is.read(buf, 0, read_size);
//                real_contents = Arrays.copyOf(buf, read_size);
//            } catch (FileNotFoundException e) {
//                e.printStackTrace();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//
//            Log.d(TAG, "Contents of " + currentFileNum + ".aac (length: " + read_size + "):");
//            Helpers.printLongString(TAG, Helpers.bytesToHex(real_contents));
//
//            currentFileNum++;
//        }


    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        LocalBroadcastManager.getInstance(this).unregisterReceiver(AACADTSFrameProcessorListener);
    }
}